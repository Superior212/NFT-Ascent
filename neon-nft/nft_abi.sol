/**
 * This file was automatically generated by Stylus and represents a Rust program.
 * For more information, please see [The Stylus SDK](https://github.com/OffchainLabs/stylus-sdk-rs).
 */

// SPDX-License-Identifier: MIT-OR-APACHE-2.0
pragma solidity ^0.8.23;

interface IMultiCollectionNFT  {
    function initialize() external;

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function createCollection(string calldata name, string calldata symbol, string calldata base_uri) external returns (uint256);

    function getCollection(uint256 collection_id) external view returns (string memory, string memory, address, string memory, uint256);

    function balanceOf(address owner) external view returns (uint256);

    function balanceOfCollection(address owner, uint256 collection_id) external view returns (uint256);

    function ownerOf(uint256 token_id) external view returns (address);

    function tokenUri(uint256 token_id) external view returns (string memory);

    function tokenCollection(uint256 token_id) external view returns (uint256);

    function exists(uint256 token_id) external view returns (bool);

    function approve(address to, uint256 token_id) external;

    function getApproved(uint256 token_id) external view returns (address);

    function setApprovalForAll(address operator, bool approved) external;

    function isApprovedForAll(address owner, address operator) external view returns (bool);

    function transferFrom(address from, address to, uint256 token_id) external;

    function safeTransferFrom(address from, address to, uint256 token_id) external;

    function safeTransferFromWithData(address from, address to, uint256 token_id, string calldata _data) external;

    function transfer(address from, address to, uint256 token_id) external;

    function clearApproval(uint256 token_id) external;

    function isApprovedOrOwner(address spender, uint256 token_id) external view returns (bool);

    function mintNft(uint256 collection_id, string calldata token_uri) external returns (uint256);

    function getNextTokenId() external view returns (uint256);

    function getNextCollectionId() external view returns (uint256);

    error AlreadyInitialized();

    error InvalidTokenURI();

    error InvalidCollectionName();

    error InvalidCollectionId();

    error NotCollectionCreator();

    error ERC721InvalidTokenId();

    error ERC721InvalidSender();

    error ERC721InvalidReceiver();

    error ERC721InsufficientApproval();

    error ERC721InvalidApprover();

    error ERC721InvalidOperator();
}
